# --- NẠP CÁC THƯ VIỆN CẦN THIẾT CHO TOÀN BỘ DỰ ÁN ---
# 'pacman' giúp quản lý (kiểm tra, cài đặt, nạp) các gói
if (!require("pacman")) install.packages("pacman")
# Sử dụng pacman để nạp các gói
pacman::p_load(
# Gói cho thao tác dữ liệu
dplyr,         # Công cụ thao tác dữ liệu (filter, mutate, select, group_by, summarise)
tidyr,         # Giúp làm sạch và định hình lại dữ liệu (pivot_longer, pivot_wider)
lubridate,     # Xử lý dữ liệu ngày tháng
# Gói cho trực quan hóa
ggplot2,       # Hệ thống vẽ đồ thị mạnh mẽ và linh hoạt
patchwork,     # Ghép nhiều biểu đồ ggplot lại với nhau
corrplot,      # Vẽ ma trận tương quan
GGally,        # Chứa hàm ggpairs cho ma trận scatter plot và tương quan
# Gói cho phân cụm
cluster,       # Chứa các thuật toán phân cụm như kmeans, silhouette
factoextra,    # Trực quan hóa kết quả phân cụm, xác định số cụm tối ưu
# Gói cho mô hình hóa và đánh giá (Học có giám sát)
caret,         # Công cụ cho chia dữ liệu, tiền xử lý, huấn luyện và đánh giá mô hình
pROC,          # Vẽ đường cong ROC và tính AUC
car,           # Chứa hàm vif() để kiểm tra đa cộng tuyến trong hồi quy
# Gói cho trình bày bảng biểu
knitr,         # Hỗ trợ render R Markdown, có hàm kable()
kableExtra     # Tùy chỉnh bảng kable
)
# Thiết lập tùy chọn chung cho các chunk R
knitr::opts_chunk$set(
echo = TRUE,       # Hiển thị code R trong output
message = FALSE,   # Ẩn các thông báo (messages)
warning = FALSE,   # Ẩn các cảnh báo (warnings)
fig.align = "center" # Căn giữa hình ảnh
)
# Đọc dữ liệu từ file .csv
customers_raw <- read.csv("../data/marketing_campaign.csv", sep = "\t")
cat("Bộ dữ liệu gốc có", nrow(customers_raw), "quan sát và", ncol(customers_raw), "biến.\n")
cat("Một vài biến chính ban đầu:\n")
print(head(customers_raw[, c("Year_Birth", "Education", "Income", "MntWines", "Response")], 3))
glimpse(customers_raw)
# 1. Loại bỏ NA trong Income
customers_clean <- customers_raw %>% filter(!is.na(Income))
# 2. Tính tuổi tạm thời và lọc outlier về tuổi và thu nhập
# Sử dụng 2014 làm năm tham chiếu
customers_filtered <- customers_clean %>%
mutate(Age_temp = 2014 - Year_Birth) %>%
filter(Age_temp <= 100 & Age_temp >= 18) %>% # Giữ tuổi hợp lý
filter(Income < 600000) %>% # Loại bỏ thu nhập quá cao
select(-Age_temp)
cat("Số quan sát còn lại:")
nrow(customers_filtered) # Xem số quan sát còn lại
# Tìm ngày đăng ký cuối cùng làm mốc
max_date <- max(as.Date(customers_filtered$Dt_Customer, format="%d-%m-%Y"), na.rm = TRUE)
customers_final <- customers_filtered %>%
mutate(
Age = 2014 - Year_Birth,
total_spent = MntWines + MntFruits + MntMeatProducts + MntFishProducts + MntSweetProducts + MntGoldProds,
log_total_spent = log1p(total_spent), # log1p(x) tương đương log(x + 1)
Child_Total = Kidhome + Teenhome,
AcceptedCmp_Total = AcceptedCmp1 + AcceptedCmp2 + AcceptedCmp3 + AcceptedCmp4 + AcceptedCmp5,
Days_Customer = as.numeric(max_date - as.Date(Dt_Customer, format="%d-%m-%Y"))
) %>%
# Chọn các cột cuối cùng
select(
# Các biến độc lập (Predictors)
Education, Marital_Status, Income, Recency, Complain, Age, Child_Total,
AcceptedCmp_Total, Days_Customer,
NumDealsPurchases, NumWebPurchases, NumCatalogPurchases, NumStorePurchases, NumWebVisitsMonth,
# Các biến mục tiêu (Outcomes)
Response,
log_total_spent,
total_spent
) %>%
# Chuyển đổi các biến ký tự thành factor
mutate(across(where(is.character), as.factor))
cat(paste("Bộ dữ liệu cuối cùng (customers_final) có", nrow(customers_final), "quan sát và", ncol(customers_final), "biến.\n"))
cat("Các biến chính trong bộ dữ liệu cuối cùng bao gồm:\n")
print(names(customers_final))
# Xem cấu trúc cuối cùng
glimpse(customers_final)
# Biểu đồ Histogram cho các biến số lượng
p1 <- ggplot(customers_final, aes(x = Income)) + geom_histogram(bins = 30, fill = "skyblue", color = "black") + ggtitle("Phân phối Thu nhập (Income)") + theme_minimal()
p2 <- ggplot(customers_final, aes(x = Age)) + geom_histogram(bins = 30, fill = "lightgreen", color = "black") + ggtitle("Phân phối Tuổi (Age)") + theme_minimal()
p3 <- ggplot(customers_final, aes(x = total_spent)) + geom_histogram(bins = 30, fill = "salmon", color = "black") + ggtitle("Phân phối Tổng chi tiêu (Total Spent)") + theme_minimal()
p4 <- ggplot(customers_final, aes(x = log_total_spent)) + geom_histogram(bins = 30, fill = "gold", color = "black") + ggtitle("Phân phối Log(Total Spent)") + theme_minimal()
# Ghép các biểu đồ
(p1 | p2) / (p3 | p4)
p_edu <- ggplot(customers_final, aes(y = Education, fill = Education)) + geom_bar() + ggtitle("Phân phối Trình độ học vấn (Education)") + theme_minimal() + theme(legend.position = "none")
p_mar <- ggplot(customers_final, aes(y = Marital_Status, fill = Marital_Status)) + geom_bar() + ggtitle("Phân phối Tình trạng hôn nhân (Marital Status)") + theme_minimal() + theme(legend.position = "none")
p_edu / p_mar
# Thu nhập vs Tổng chi tiêu
p_inc_spent <- ggplot(customers_final, aes(x = Income, y = total_spent)) +
geom_point(alpha = 0.5, color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) + # Thêm đường xu hướng tuyến tính
ggtitle("Thu nhập vs Tổng chi tiêu") +
theme_minimal()
# Tuổi vs Tổng chi tiêu
p_age_spent <- ggplot(customers_final, aes(x = Age, y = total_spent)) +
geom_point(alpha = 0.5, color = "green") +
geom_smooth(method = "loess", color = "red", se = FALSE) + # Thêm đường xu hướng tổng quát
ggtitle("Tuổi vs Tổng chi tiêu") +
theme_minimal()
p_inc_spent + p_age_spent
# Học vấn và Chi tiêu
p_edu_spent <- ggplot(customers_final, aes(x = Education, y = total_spent, fill = Education)) + geom_boxplot() + ggtitle("Tổng chi tiêu theo Học vấn") + theme_minimal() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
p_edu_spent
# Số con vs Chi tiêu
p_child_spent <- ggplot(customers_final, aes(x = as.factor(Child_Total), y = total_spent, fill = as.factor(Child_Total))) + geom_boxplot() + ggtitle("Tổng chi tiêu theo Số con") + xlab("Số con (Tổng)") + theme_minimal()
p_child_spent
# Phản hồi chiến dịch vs Chi tiêu
p_resp_spent <- ggplot(customers_final, aes(x = as.factor(Response), y = total_spent, fill = as.factor(Response))) + geom_boxplot() + ggtitle("Tổng chi tiêu theo Phản hồi (Response)") + xlab("Response (0=No, 1=Yes)") + theme_minimal()
p_resp_spent
# 1. Lựa chọn và chuẩn hóa biến
cols_for_clustering <- c("Income", "Recency", "Age", "Child_Total",
"total_spent", "NumDealsPurchases",
"NumWebPurchases", "NumCatalogPurchases",
"NumStorePurchases", "NumWebVisitsMonth",
"Days_Customer", "AcceptedCmp_Total")
customers_clustering_data <- customers_final[, cols_for_clustering]
customers_scaled <- scale(customers_clustering_data)
set.seed(123)
fviz_nbclust(customers_scaled, kmeans, method = "wss") +
#wss = within sum square
geom_vline(xintercept = 4, linetype = 2) + # Ví dụ chọn k=4
labs(subtitle = "Elbow method")
set.seed(123)
fviz_nbclust(customers_scaled, kmeans, method = "silhouette") +
labs(subtitle = "Silhouette method")
# => Giả sử sau khi xem xét, chúng ta chọn k = 4
optimal_k <- 4
set.seed(123)
kmeans_result <- kmeans(customers_scaled, centers = optimal_k, nstart = 50)
customers_final$Cluster_KMeans <- as.factor(kmeans_result$cluster)
# Chọn các biến độc lập và biến mục tiêu 'Response'
# Loại bỏ các biến liên quan đến chi tiêu đã tính log và gốc
cols_for_logistic <- setdiff(names(customers_final), c("log_total_spent", "total_spent"))
logistic_data <- customers_final[, cols_for_logistic]
# Chuyển Response thành factor với levels phù hợp
logistic_data$Response <- as.factor(make.names(logistic_data$Response)) # Tạo level X0 và X1
set.seed(123)
trainIndex <- createDataPartition(logistic_data$Response, p = .75,
list = FALSE,
times = 1)
train_set_log <- logistic_data[ trainIndex,]
test_set_log  <- logistic_data[-trainIndex,]
# Sử dụng công thức '.' để bao gồm tất cả các predictors còn lại
logistic_model <- glm(Response ~ ., data = train_set_log, family = binomial(link = "logit"))
# Dự đoán xác suất P(Response=1) (tức là P(Response=X1))
probabilities <- predict(logistic_model, newdata = test_set_log, type = "response")
# Chuyển đổi xác suất thành lớp dự đoán (0 hoặc 1) dùng ngưỡng 0.5
predicted_classes <- ifelse(probabilities > 0.5, "X1", "X0")
predicted_classes <- as.factor(predicted_classes)
# Chọn các biến độc lập và biến mục tiêu 'log_total_spent' từ 'customers_final'
library(caret)
# Loại bỏ 'Response' và 'total_spent' gốc
cols_for_linear <- setdiff(names(customers_final), c("Response", "total_spent"))
linear_data <- customers_final[, cols_for_linear]
set.seed(456)
trainIndex_lm <- createDataPartition(linear_data$log_total_spent, p = .75, list = FALSE,  times = 1)
train_set_lm <- linear_data[ trainIndex_lm,]
test_set_lm  <- linear_data[-trainIndex_lm,]
# Sử dụng công thức '.' để bao gồm tất cả các predictors trong train_set_lm
linear_model <- lm(log_total_spent ~ ., data = train_set_lm)
predictions_lm <- predict(linear_model, newdata = test_set_lm)
# Ví dụ tính RMSE:
actual_values_lm <- test_set_lm$log_total_spent
rmse_lm <- sqrt(mean((actual_values_lm - predictions_lm)^2))
print(paste("RMSE for Linear Regression:", rmse_lm))
# Phương pháp Elbow
set.seed(123)
p_elbow <- fviz_nbclust(customers_scaled, kmeans, method = "wss") +
geom_vline(xintercept = 4, linetype = 2, color="steelblue") + # Giả sử chọn k=4
labs(title = "Phương pháp Elbow") + theme_minimal()
# Phương pháp Silhouette
set.seed(123)
p_silhouette <- fviz_nbclust(customers_scaled, kmeans, method = "silhouette") +
labs(title = "Phương pháp Silhouette") +
theme_minimal()
# Hiển thị 2 biểu đồ
p_elbow + p_silhouette
fviz_cluster(kmeans_result, data = customers_scaled,
ellipse.type = "confidence", # Hoặc "convex", "euclid"
geom = "point",
pointsize = 1,
ggtheme = theme_minimal(),
main = paste("Phân cụm K-Means (k=", optimal_k, ") với PCA"))
# Tính toán giá trị trung bình của các biến số lượng theo từng cụm
cluster_summary_numerical <- customers_final %>%
group_by(Cluster_KMeans) %>%
summarise(
Avg_Income = mean(Income, na.rm = TRUE),
Avg_Age = mean(Age, na.rm = TRUE),
Avg_Total_Spent = mean(total_spent, na.rm = TRUE),
Avg_Recency = mean(Recency, na.rm = TRUE),
Avg_Child_Total = mean(Child_Total, na.rm = TRUE),
Avg_AcceptedCmp_Total = mean(AcceptedCmp_Total, na.rm = TRUE),
Count = n() # Số lượng khách hàng trong mỗi cụm
) %>%
arrange(Cluster_KMeans)
# Hiển thị bảng tóm tắt
knitr::kable(cluster_summary_numerical, caption = "Đặc điểm trung bình các cụm K-Means")
p_income_cluster <- ggplot(customers_final, aes(x = Cluster_KMeans, y = Income, fill = Cluster_KMeans)) + geom_boxplot() + theme_minimal() + ggtitle("Thu nhập theo Cụm")
p_spent_cluster <- ggplot(customers_final, aes(x = Cluster_KMeans, y = total_spent, fill = Cluster_KMeans)) + geom_boxplot() + theme_minimal() + ggtitle("Tổng chi tiêu theo Cụm")
p_child_cluster <- ggplot(customers_final, aes(x = Cluster_KMeans, y = Child_Total, fill = Cluster_KMeans)) + geom_boxplot() + theme_minimal() + ggtitle("Số con theo Cụm")
p_recency_cluster <- ggplot(customers_final, aes(x = Cluster_KMeans, y = Recency, fill = Cluster_KMeans)) + geom_boxplot() + theme_minimal() + ggtitle("Recency theo Cụm")
(p_income_cluster | p_spent_cluster) / (p_child_cluster | p_recency_cluster)
# 1. Ma trận nhầm lẫn (Confusion Matrix) và các chỉ số liên quan
conf_matrix_log <- confusionMatrix(predicted_classes, test_set_log$Response, positive = "X1")
# 2. Đường cong ROC và giá trị AUC
roc_curve_log <- roc(response = test_set_log$Response, predictor = probabilities, levels = c("X0", "X1"), direction = "<")
print(paste("Accuracy:", round(conf_matrix_log$overall['Accuracy'], 4)))
print(paste("Sensitivity (Recall for X1):", round(conf_matrix_log$byClass['Sensitivity'], 4)))
print(paste("Specificity (Recall for X0):", round(conf_matrix_log$byClass['Specificity'], 4)))
print(paste("AUC:", round(auc(roc_curve_log), 4)))
summary_coeffs_log <- summary(logistic_model)$coefficients
significant_coeffs_log <- summary_coeffs_log[summary_coeffs_log[, "Pr(>|z|)"] < 0.05, ]
odds_ratios_sig <- exp(significant_coeffs_log[, "Estimate"])
kable(data.frame(Estimate = significant_coeffs_log[, "Estimate"],
Std.Error = significant_coeffs_log[, "Std. Error"],
z.value = significant_coeffs_log[, "z value"],
P_value = significant_coeffs_log[, "Pr(>|z|)"],
Odds_Ratio = odds_ratios_sig),
caption = "Các hệ số có ý nghĩa thống kê trong Mô hình Logistic", digits = 3)
# 1. R-squared và Adjusted R-squared từ summary của mô hình huấn luyện
summary_linear_model <- summary(linear_model)
r_squared <- summary_linear_model$r.squared
adj_r_squared <- summary_linear_model$adj.r.squared
print(paste("R-squared trên tập huấn luyện:", round(r_squared, 4)))
print(paste("Adjusted R-squared trên tập huấn luyện:", round(adj_r_squared, 4)))
# 2. Tính R-squared trên tập kiểm tra (để đánh giá khả năng tổng quát hóa)
sst_lm_test <- sum((actual_values_lm - mean(actual_values_lm))^2)
sse_lm_test <- sum((actual_values_lm - predictions_lm)^2)
r_squared_test <- 1 - (sse_lm_test / sst_lm_test)
print(paste("R-squared trên tập kiểm tra:", round(r_squared_test, 4)))
# 3. RMSE trên tập kiểm tra
print(paste("RMSE trên tập kiểm tra (cho log_total_spent):", round(rmse_lm, 4)))
# Để diễn giải RMSE dễ hơn, có thể chuyển về thang đo gốc (nếu cần, nhưng thường RMSE của log-transformed là đủ)
original_scale_predictions_lm <- expm1(predictions_lm) # exp(x) - 1
original_scale_actual_lm <- expm1(actual_values_lm)
rmse_original_scale_lm <- sqrt(mean((original_scale_actual_lm - original_scale_predictions_lm)^2))
print(paste("RMSE trên tập kiểm tra (thang đo gốc của total_spent):", round(rmse_original_scale_lm, 2)))
par(mfrow = c(2, 2))
plot(linear_model)
par(mfrow = c(1, 1))
summary_coeffs_linear <- summary(linear_model)$coefficients
significant_coeffs_linear <- summary_coeffs_linear[summary_coeffs_linear[, "Pr(>|t|)"] < 0.05, ]
kable(significant_coeffs_linear, caption = "Các hệ số có ý nghĩa thống kê trong Mô hình Hồi quy Tuyến tính", digits = 3)
# --- NẠP CÁC THƯ VIỆN CẦN THIẾT CHO TOÀN BỘ DỰ ÁN ---
# 'pacman' giúp quản lý (kiểm tra, cài đặt, nạp) các gói
if (!require("pacman")) install.packages("pacman")
# Sử dụng pacman để nạp các gói
pacman::p_load(
# Gói cho thao tác dữ liệu
dplyr,         # Công cụ thao tác dữ liệu (filter, mutate, select, group_by, summarise)
tidyr,         # Giúp làm sạch và định hình lại dữ liệu (pivot_longer, pivot_wider)
lubridate,     # Xử lý dữ liệu ngày tháng
# Gói cho trực quan hóa
ggplot2,       # Hệ thống vẽ đồ thị mạnh mẽ và linh hoạt
patchwork,     # Ghép nhiều biểu đồ ggplot lại với nhau
corrplot,      # Vẽ ma trận tương quan
GGally,        # Chứa hàm ggpairs cho ma trận scatter plot và tương quan
# Gói cho phân cụm
cluster,       # Chứa các thuật toán phân cụm như kmeans, silhouette
factoextra,    # Trực quan hóa kết quả phân cụm, xác định số cụm tối ưu
# Gói cho mô hình hóa và đánh giá (Học có giám sát)
caret,         # Công cụ cho chia dữ liệu, tiền xử lý, huấn luyện và đánh giá mô hình
pROC,          # Vẽ đường cong ROC và tính AUC
car,           # Chứa hàm vif() để kiểm tra đa cộng tuyến trong hồi quy
# Gói cho trình bày bảng biểu
knitr,         # Hỗ trợ render R Markdown, có hàm kable()
kableExtra     # Tùy chỉnh bảng kable
)
# Thiết lập tùy chọn chung cho các chunk R
knitr::opts_chunk$set(
echo = TRUE,       # Hiển thị code R trong output
message = FALSE,   # Ẩn các thông báo (messages)
warning = FALSE,   # Ẩn các cảnh báo (warnings)
fig.align = "center" # Căn giữa hình ảnh
)
# Đọc dữ liệu từ file .csv
customers_raw <- read.csv("../data/marketing_campaign.csv", sep = "\t")
cat("Bộ dữ liệu gốc có", nrow(customers_raw), "quan sát và", ncol(customers_raw), "biến.\n")
cat("Một vài biến chính ban đầu:\n")
print(head(customers_raw[, c("Year_Birth", "Education", "Income", "MntWines", "Response")], 3))
glimpse(customers_raw)
# 1. Loại bỏ NA trong Income
customers_clean <- customers_raw %>% filter(!is.na(Income))
# 2. Tính tuổi tạm thời và lọc outlier về tuổi và thu nhập
# Sử dụng 2014 làm năm tham chiếu
customers_filtered <- customers_clean %>%
mutate(Age_temp = 2014 - Year_Birth) %>%
filter(Age_temp <= 100 & Age_temp >= 18) %>% # Giữ tuổi hợp lý
filter(Income < 600000) %>% # Loại bỏ thu nhập quá cao
select(-Age_temp)
cat("Số quan sát còn lại:")
nrow(customers_filtered) # Xem số quan sát còn lại
# Tìm ngày đăng ký cuối cùng làm mốc
max_date <- max(as.Date(customers_filtered$Dt_Customer, format="%d-%m-%Y"), na.rm = TRUE)
customers_final <- customers_filtered %>%
mutate(
Age = 2014 - Year_Birth,
total_spent = MntWines + MntFruits + MntMeatProducts + MntFishProducts + MntSweetProducts + MntGoldProds,
log_total_spent = log1p(total_spent), # log1p(x) tương đương log(x + 1)
Child_Total = Kidhome + Teenhome,
AcceptedCmp_Total = AcceptedCmp1 + AcceptedCmp2 + AcceptedCmp3 + AcceptedCmp4 + AcceptedCmp5,
Days_Customer = as.numeric(max_date - as.Date(Dt_Customer, format="%d-%m-%Y"))
) %>%
# Chọn các cột cuối cùng
select(
# Các biến độc lập (Predictors)
Education, Marital_Status, Income, Recency, Complain, Age, Child_Total,
AcceptedCmp_Total, Days_Customer,
NumDealsPurchases, NumWebPurchases, NumCatalogPurchases, NumStorePurchases, NumWebVisitsMonth,
# Các biến mục tiêu (Outcomes)
Response,
log_total_spent,
total_spent
) %>%
# Chuyển đổi các biến ký tự thành factor
mutate(across(where(is.character), as.factor))
cat(paste("Bộ dữ liệu cuối cùng (customers_final) có", nrow(customers_final), "quan sát và", ncol(customers_final), "biến.\n"))
cat("Các biến chính trong bộ dữ liệu cuối cùng bao gồm:\n")
print(names(customers_final))
# Xem cấu trúc cuối cùng
glimpse(customers_final)
# Biểu đồ Histogram cho các biến số lượng
p1 <- ggplot(customers_final, aes(x = Income)) + geom_histogram(bins = 30, fill = "skyblue", color = "black") + ggtitle("Phân phối Thu nhập (Income)") + theme_minimal()
p2 <- ggplot(customers_final, aes(x = Age)) + geom_histogram(bins = 30, fill = "lightgreen", color = "black") + ggtitle("Phân phối Tuổi (Age)") + theme_minimal()
p3 <- ggplot(customers_final, aes(x = total_spent)) + geom_histogram(bins = 30, fill = "salmon", color = "black") + ggtitle("Phân phối Tổng chi tiêu (Total Spent)") + theme_minimal()
p4 <- ggplot(customers_final, aes(x = log_total_spent)) + geom_histogram(bins = 30, fill = "gold", color = "black") + ggtitle("Phân phối Log(Total Spent)") + theme_minimal()
# Ghép các biểu đồ
(p1 | p2) / (p3 | p4)
p_edu <- ggplot(customers_final, aes(y = Education, fill = Education)) + geom_bar() + ggtitle("Phân phối Trình độ học vấn (Education)") + theme_minimal() + theme(legend.position = "none")
p_mar <- ggplot(customers_final, aes(y = Marital_Status, fill = Marital_Status)) + geom_bar() + ggtitle("Phân phối Tình trạng hôn nhân (Marital Status)") + theme_minimal() + theme(legend.position = "none")
p_edu / p_mar
# Thu nhập vs Tổng chi tiêu
p_inc_spent <- ggplot(customers_final, aes(x = Income, y = total_spent)) +
geom_point(alpha = 0.5, color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) + # Thêm đường xu hướng tuyến tính
ggtitle("Thu nhập vs Tổng chi tiêu") +
theme_minimal()
# Tuổi vs Tổng chi tiêu
p_age_spent <- ggplot(customers_final, aes(x = Age, y = total_spent)) +
geom_point(alpha = 0.5, color = "green") +
geom_smooth(method = "loess", color = "red", se = FALSE) + # Thêm đường xu hướng tổng quát
ggtitle("Tuổi vs Tổng chi tiêu") +
theme_minimal()
p_inc_spent + p_age_spent
# Học vấn và Chi tiêu
p_edu_spent <- ggplot(customers_final, aes(x = Education, y = total_spent, fill = Education)) + geom_boxplot() + ggtitle("Tổng chi tiêu theo Học vấn") + theme_minimal() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
p_edu_spent
# Số con vs Chi tiêu
p_child_spent <- ggplot(customers_final, aes(x = as.factor(Child_Total), y = total_spent, fill = as.factor(Child_Total))) + geom_boxplot() + ggtitle("Tổng chi tiêu theo Số con") + xlab("Số con (Tổng)") + theme_minimal()
p_child_spent
# Phản hồi chiến dịch vs Chi tiêu
p_resp_spent <- ggplot(customers_final, aes(x = as.factor(Response), y = total_spent, fill = as.factor(Response))) + geom_boxplot() + ggtitle("Tổng chi tiêu theo Phản hồi (Response)") + xlab("Response (0=No, 1=Yes)") + theme_minimal()
p_resp_spent
# 1. Lựa chọn và chuẩn hóa biến
cols_for_clustering <- c("Income", "Recency", "Age", "Child_Total",
"total_spent", "NumDealsPurchases",
"NumWebPurchases", "NumCatalogPurchases",
"NumStorePurchases", "NumWebVisitsMonth",
"Days_Customer", "AcceptedCmp_Total")
customers_clustering_data <- customers_final[, cols_for_clustering]
customers_scaled <- scale(customers_clustering_data)
set.seed(123)
fviz_nbclust(customers_scaled, kmeans, method = "wss") +
#wss = within sum square
geom_vline(xintercept = 4, linetype = 2) + # Ví dụ chọn k=4
labs(subtitle = "Elbow method")
set.seed(123)
fviz_nbclust(customers_scaled, kmeans, method = "silhouette") +
labs(subtitle = "Silhouette method")
# => Giả sử sau khi xem xét, chúng ta chọn k = 4
optimal_k <- 4
set.seed(123)
kmeans_result <- kmeans(customers_scaled, centers = optimal_k, nstart = 50)
customers_final$Cluster_KMeans <- as.factor(kmeans_result$cluster)
# Chọn các biến độc lập và biến mục tiêu 'Response'
# Loại bỏ các biến liên quan đến chi tiêu đã tính log và gốc
cols_for_logistic <- setdiff(names(customers_final), c("log_total_spent", "total_spent"))
logistic_data <- customers_final[, cols_for_logistic]
# Chuyển Response thành factor với levels phù hợp
logistic_data$Response <- as.factor(make.names(logistic_data$Response)) # Tạo level X0 và X1
set.seed(123)
trainIndex <- createDataPartition(logistic_data$Response, p = .75,
list = FALSE,
times = 1)
train_set_log <- logistic_data[ trainIndex,]
test_set_log  <- logistic_data[-trainIndex,]
# Sử dụng công thức '.' để bao gồm tất cả các predictors còn lại
logistic_model <- glm(Response ~ ., data = train_set_log, family = binomial(link = "logit"))
# Dự đoán xác suất P(Response=1) (tức là P(Response=X1))
probabilities <- predict(logistic_model, newdata = test_set_log, type = "response")
# Chuyển đổi xác suất thành lớp dự đoán (0 hoặc 1) dùng ngưỡng 0.5
predicted_classes <- ifelse(probabilities > 0.5, "X1", "X0")
predicted_classes <- as.factor(predicted_classes)
# Chọn các biến độc lập và biến mục tiêu 'log_total_spent' từ 'customers_final'
library(caret)
# Loại bỏ 'Response' và 'total_spent' gốc
cols_for_linear <- setdiff(names(customers_final), c("Response", "total_spent"))
linear_data <- customers_final[, cols_for_linear]
set.seed(456)
trainIndex_lm <- createDataPartition(linear_data$log_total_spent, p = .75, list = FALSE,  times = 1)
train_set_lm <- linear_data[ trainIndex_lm,]
test_set_lm  <- linear_data[-trainIndex_lm,]
# Sử dụng công thức '.' để bao gồm tất cả các predictors trong train_set_lm
linear_model <- lm(log_total_spent ~ ., data = train_set_lm)
predictions_lm <- predict(linear_model, newdata = test_set_lm)
# Ví dụ tính RMSE:
actual_values_lm <- test_set_lm$log_total_spent
rmse_lm <- sqrt(mean((actual_values_lm - predictions_lm)^2))
print(paste("RMSE for Linear Regression:", rmse_lm))
# Phương pháp Elbow
set.seed(123)
p_elbow <- fviz_nbclust(customers_scaled, kmeans, method = "wss") +
geom_vline(xintercept = 4, linetype = 2, color="steelblue") + # Giả sử chọn k=4
labs(title = "Phương pháp Elbow") + theme_minimal()
# Phương pháp Silhouette
set.seed(123)
p_silhouette <- fviz_nbclust(customers_scaled, kmeans, method = "silhouette") +
labs(title = "Phương pháp Silhouette") +
theme_minimal()
# Hiển thị 2 biểu đồ
p_elbow + p_silhouette
fviz_cluster(kmeans_result, data = customers_scaled,
ellipse.type = "confidence", # Hoặc "convex", "euclid"
geom = "point",
pointsize = 1,
ggtheme = theme_minimal(),
main = paste("Phân cụm K-Means (k=", optimal_k, ") với PCA"))
# Tính toán giá trị trung bình của các biến số lượng theo từng cụm
cluster_summary_numerical <- customers_final %>%
group_by(Cluster_KMeans) %>%
summarise(
Avg_Income = mean(Income, na.rm = TRUE),
Avg_Age = mean(Age, na.rm = TRUE),
Avg_Total_Spent = mean(total_spent, na.rm = TRUE),
Avg_Recency = mean(Recency, na.rm = TRUE),
Avg_Child_Total = mean(Child_Total, na.rm = TRUE),
Avg_AcceptedCmp_Total = mean(AcceptedCmp_Total, na.rm = TRUE),
Count = n() # Số lượng khách hàng trong mỗi cụm
) %>%
arrange(Cluster_KMeans)
# Hiển thị bảng tóm tắt
knitr::kable(cluster_summary_numerical, caption = "Đặc điểm trung bình các cụm K-Means")
p_income_cluster <- ggplot(customers_final, aes(x = Cluster_KMeans, y = Income, fill = Cluster_KMeans)) + geom_boxplot() + theme_minimal() + ggtitle("Thu nhập theo Cụm")
p_spent_cluster <- ggplot(customers_final, aes(x = Cluster_KMeans, y = total_spent, fill = Cluster_KMeans)) + geom_boxplot() + theme_minimal() + ggtitle("Tổng chi tiêu theo Cụm")
p_child_cluster <- ggplot(customers_final, aes(x = Cluster_KMeans, y = Child_Total, fill = Cluster_KMeans)) + geom_boxplot() + theme_minimal() + ggtitle("Số con theo Cụm")
p_recency_cluster <- ggplot(customers_final, aes(x = Cluster_KMeans, y = Recency, fill = Cluster_KMeans)) + geom_boxplot() + theme_minimal() + ggtitle("Recency theo Cụm")
(p_income_cluster | p_spent_cluster) / (p_child_cluster | p_recency_cluster)
# 1. Ma trận nhầm lẫn (Confusion Matrix) và các chỉ số liên quan
conf_matrix_log <- confusionMatrix(predicted_classes, test_set_log$Response, positive = "X1")
# 2. Đường cong ROC và giá trị AUC
roc_curve_log <- roc(response = test_set_log$Response, predictor = probabilities, levels = c("X0", "X1"), direction = "<")
print(paste("Accuracy:", round(conf_matrix_log$overall['Accuracy'], 4)))
print(paste("Sensitivity (Recall for X1):", round(conf_matrix_log$byClass['Sensitivity'], 4)))
print(paste("Specificity (Recall for X0):", round(conf_matrix_log$byClass['Specificity'], 4)))
print(paste("AUC:", round(auc(roc_curve_log), 4)))
summary_coeffs_log <- summary(logistic_model)$coefficients
significant_coeffs_log <- summary_coeffs_log[summary_coeffs_log[, "Pr(>|z|)"] < 0.05, ]
odds_ratios_sig <- exp(significant_coeffs_log[, "Estimate"])
kable(data.frame(Estimate = significant_coeffs_log[, "Estimate"],
Std.Error = significant_coeffs_log[, "Std. Error"],
z.value = significant_coeffs_log[, "z value"],
P_value = significant_coeffs_log[, "Pr(>|z|)"],
Odds_Ratio = odds_ratios_sig),
caption = "Các hệ số có ý nghĩa thống kê trong Mô hình Logistic", digits = 3)
# 1. R-squared và Adjusted R-squared từ summary của mô hình huấn luyện
summary_linear_model <- summary(linear_model)
r_squared <- summary_linear_model$r.squared
adj_r_squared <- summary_linear_model$adj.r.squared
print(paste("R-squared trên tập huấn luyện:", round(r_squared, 4)))
print(paste("Adjusted R-squared trên tập huấn luyện:", round(adj_r_squared, 4)))
# 2. Tính R-squared trên tập kiểm tra (để đánh giá khả năng tổng quát hóa)
sst_lm_test <- sum((actual_values_lm - mean(actual_values_lm))^2)
sse_lm_test <- sum((actual_values_lm - predictions_lm)^2)
r_squared_test <- 1 - (sse_lm_test / sst_lm_test)
print(paste("R-squared trên tập kiểm tra:", round(r_squared_test, 4)))
# 3. RMSE trên tập kiểm tra
print(paste("RMSE trên tập kiểm tra (cho log_total_spent):", round(rmse_lm, 4)))
# Để diễn giải RMSE dễ hơn, có thể chuyển về thang đo gốc (nếu cần, nhưng thường RMSE của log-transformed là đủ)
original_scale_predictions_lm <- expm1(predictions_lm) # exp(x) - 1
original_scale_actual_lm <- expm1(actual_values_lm)
rmse_original_scale_lm <- sqrt(mean((original_scale_actual_lm - original_scale_predictions_lm)^2))
print(paste("RMSE trên tập kiểm tra (thang đo gốc của total_spent):", round(rmse_original_scale_lm, 2)))
par(mfrow = c(2, 2))
plot(linear_model)
par(mfrow = c(1, 1))
summary_coeffs_linear <- summary(linear_model)$coefficients
significant_coeffs_linear <- summary_coeffs_linear[summary_coeffs_linear[, "Pr(>|t|)"] < 0.05, ]
kable(significant_coeffs_linear, caption = "Các hệ số có ý nghĩa thống kê trong Mô hình Hồi quy Tuyến tính", digits = 3)
