geom_histogram()+
theme_minimal()
ggplot(data = ames_housing, aes(x = Central.Air))+
geom_histogram(stat = 'count')+
theme_minimal()
ggplot(data = ames_housing, )+
geom_histogram(aes(x = Central.Air), stat = 'count')+
theme_minimal()
ggplot(data = ames_housing, )+
geom_histogram(aes(x = Central.Air), stat = 'count', binwidth = 2)+
theme_minimal()
ggplot(data = ames_housing)+
geom_histogram(aes(x = Central.Air), stat = 'count', binwidth = 2)+
theme_minimal()
ggplot(data = ames_housing)+
geom_histogram(aes(x = Central.Air), stat = 'count')+
geom_bar(aes(x= Central.Air,y = SalePrice))
ggplot(data = ames_housing)+
geom_histogram(aes(x = Central.Air), stat = 'count')+
geom_bar(aes(y = SalePrice))
theme_minimal()
ggplot(data = ames_housing)+
geom_histogram(aes(x = Central.Air), stat = 'count')+
geom_line(aes(y = SalePrice))
ggplot(data = ames_housing, aes(x = Central.Air, y = SalePrice, fill = Central.Air))+
geom_violin()+
theme_minimal()
ggplot(data = ames_housing, aes(x = Central.Air, y = SalePrice, fill = Central.Air))+
geom_violin()+
geom_point()+
theme_minimal()
ggplot(data = ames_housing, aes(x = Central.Air, y = SalePrice, fill = Central.Air))+
geom_boxplot()+
geom_point()+
theme_minimal()
ggplot(data = ames_housing, aes(x = Central.Air, y = SalePrice, fill = Central.Air))+
geom_boxplot()+
geom_point()+
theme_minimal()
ggplot(data = ames_housing, aes(x = Year.Built, y = SalePrice))+
geom_bar()+
theme_minimal()
ggplot(data = ames_housing, aes(x = Year.Built, y = SalePrice))+
geom_density()+
theme_minimal()
ggplot(data = ames_housing, aes(x = Year.Built, y = SalePrice))+
geom_histogram()+
theme_minimal()
ggplot(data = ames_housing, aes(x = Year.Built, y = SalePrice))+
geom_line()+
theme_minimal()
geom_smooth(lm = '')+
ggplot(data = ames_housing, aes(x = Year.Built, y = SalePrice))+
geom_smooth(lm = '')+
theme_minimal()
ggplot(data = ames_housing, aes(x = Year.Built, y = SalePrice))+
geom_smooth(method = 'lm')+
theme_minimal()
ggplot(data = ames_housing, aes(x = Year.Built, y = SalePrice))+
geom_smooth()+
theme_minimal()
ggplot(data = ames_housing, aes(x = Year.Built, y = SalePrice))+
geom_smooth()+
geom_point()+
theme_minimal()
ggplot(data = ames_housing, aes(x = Year.Built, y = SalePrice))+
geom_smooth()+
geom_point()+
theme_minimal()
ggplot(data = ames_housing, aes(x = Year.Built, y = SalePrice))+
geom_smooth()+
theme_minimal()
ggplot(data = ames_housing, aes(x = Year.Built, y = SalePrice))+
geom_smooth()+
geom_point()+
theme_minimal()
ggplot(data = ames_housing, aes(x = Year.Built, y = SalePrice))+
geom_smooth(method = 'lm')+
theme_minimal()
ggplot(x = ames_housing, aes(x = Year.Built)) +
geom_histogram()+
theme_minimal()
ggplot(x = ames_housing, aes(x = Year.Built)) +
geom_histogram(stat = 'count')+
theme_minimal()
ggplot(data = ames_housing, aes(x = Year.Built)) +
geom_histogram(stat = 'count')+
theme_minimal()
ggplot(data = ames_housing, aes(x = Year.Built)) +
geom_bar()+
theme_minimal()
ggplot(data = ames_housing, aes(x = Year.Built)) +
geom_bar()+
theme_minimal()
ggplot(data = ames_housing, aes(x = Year.Built)) +
geom_bar()+
theme_minimal()
ggplot(data = ames_housing, aes(x = Year.Built)) +
geom_bar(linewidth = 'black')+
theme_minimal()
ggplot(data = ames_housing, aes(x = Year.Built)) +
geom_bar(line = 'black')+
theme_minimal()
ggplot(data = ames_housing, aes(x = Year.Built, fill = Year.Built)) +
geom_bar()+
theme_minimal()
ggplot(data = ames_housing, aes(x = Year.Built, color = Year.Built)) +
geom_bar()+
theme_minimal()
ggplot(data = ames_housing, aes(x = Year.Built))+
geom_smooth(method = 'lm')+
theme_minimal()
ggplot(data = ames_housing, aes(x = Year.Built))+
geom_smooth(method = 'lm')+
theme_minimal()
ggplot(data = ames_housing, aes(x = Year.Built)) +
geom_histogram()+
geom_density()+
theme_minimal()
ggplot(data = ames_housing, aes(x = Year.Built)) +
geom_histogram()+
geom_density(line = 'red')+
theme_minimal()
canxi <- read_csv("D:/UTE/Semester 4/R programming/NguyenVanQuangDuy_23110086_KTlan2/canxi.xlsx")
canxi <- read.csv("D:/UTE/Semester 4/R programming/NguyenVanQuangDuy_23110086_KTlan2/canxi.xlsx")
canxi <- read.xlsx("D:/UTE/Semester 4/R programming/NguyenVanQuangDuy_23110086_KTlan2/canxi.xlsx")
library(readxl)
canxi <- read.xlsx("D:/UTE/Semester 4/R programming/NguyenVanQuangDuy_23110086_KTlan2/canxi.xlsx")
canxi <- readxl_example("D:/UTE/Semester 4/R programming/NguyenVanQuangDuy_23110086_KTlan2/canxi.xlsx")
canxi <- readxl.example("D:/UTE/Semester 4/R programming/NguyenVanQuangDuy_23110086_KTlan2/canxi.xlsx")
canxi <- readxl_example("D:/UTE/Semester 4/R programming/NguyenVanQuangDuy_23110086_KTlan2/canxi.xlsx")
canxi <- read_xlsx("D:/UTE/Semester 4/R programming/NguyenVanQuangDuy_23110086_KTlan2/canxi.xlsx")
glimpse(canxi)
View(canxi)
missing(canxi)
#3. Kiểm định phân phối
mean(canxi)
mean(canxi['knowledge_score'])
glimpse(canxi)
mean(as.numeric(canxi['knowledge_score'])
ggplot(data = canxi, aes(x = knowledge_score))+
ggplot(data = canxi, aes(x = knowledge_score))+
geom_smooth()+
geom_point()+
theme_minimal()
ggplot(data = canxi, aes(x = knowledge_score))+
geom_density()+
theme_minimal()
ggplot(data = canxi, aes(x = knowledge_score))+
geom_density(linewidth = 1)+
theme_minimal()
ggplot(data = canxi, aes(x = knowledge_score))+
geom_density(linewidth = 1)+
geom_histogram()+
theme_minimal()
ggplot(data = canxi, aes(x = knowledge_score))+
geom_histogram()+
geom_density(linewidth = 1)+
theme_minimal()
ggplot(data = canxi, aes(x = knowledge_score))+
geom_density(linewidth = 1)+
theme_minimal()
ggplot(data = canxi, aes(y = knowledge_score))+
geom_density(linewidth = 1)+
theme_minimal()
ggplot(data = canxi, aes(x = knowledge_score))+
geom_density(linewidth = 1)+
theme_minimal()
ggplot(data = canxi, aes(x = knowledge_score, y = ..density..))+
geom_density(linewidth = 1)+
theme_minimal()
ggplot(data = canxi, aes(x = knowledge_score, y = ..density..))+
geom_histogram()
geom_density(linewidth = 1)+
theme_minimal()
ggplot(data = canxi, aes(x = knowledge_score))+
geom_density(linewidth = 1)+
theme_minimal()
median(canxi['knowledge_score'])
median(as.numeric(canxi['knowledge_score']))
mean(as.numeric(canxi['knowledge_score']))
mean(canxi$knowledge_score)
median(canxi$knowledge_score)
summary(canxi$knowledge_score)
ggplot(data = canxi, aes(x = calcium_intake, y = knowledge_score))+
geom_smooth()+
geom_point()+
theme_minimal()
ggplot(data = canxi, aes(x = calcium_intake, y = knowledge_score))+
geom_violin()+
geom_point()+
theme_minimal()
ggplot(data = canxi, aes(x = calcium_intake, y = knowledge_score))+
geom_boxplot()+
geom_point()+
theme_minimal()
ggplot(data = canxi, aes(x = calcium_intake, y = knowledge_score))+
geom_smooth()+
geom_point()+
theme_minimal()
ggplot(data = canxi, aes(x = knowledge_score, y = calcium_intake))+
geom_point()+
theme_minimal()
ggplot(data = canxi, aes(x = knowledge_score))+
geom_point(aes(x = calcium_intake))+
theme_minimal()
ggplot(data = canxi, aes(x = knowledge_score, y = calcium_intake, color = knowledge_score))+
geom_point()+
theme_minimal()
ggplot(data = canxi, aes(x = knowledge_score, y = calcium_intake, fill = knowledge_score))+
geom_point()+
theme_minimal()
ggplot(data = canxi)+
geom_point()+
theme_minimal()
library(readr)
library(vroom)
detach("package:vroom", unload = TRUE)
library(vroom)
detach("package:vroom", unload = TRUE)
library(infer)
install.packages("infer")
library(infer)
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
library(tidyverse)
library(openintro)
install.packages(openintro)
library(infer)
us_adults <- tibble(
climate_change_affects = c(rep("Yes", 62000), rep("No", 38000))
)
ggplot(us_adults, aes(x = climate_change_affects)) +
geom_bar() +
labs(
x = "", y = "",
title = "Climate change response"
) +
coord_flip()
us_adults['climate_change_effect']
us_adults['climate_change_affects']
count(us_adults['climate_change_affects'])
count(us_adults['climate_change_affects'])
count(us_adults['climate_change_affects'])
us_adults %>%
filter(climate_change_effect = "Yes")%>%
mutate(adult_yes = count(climate_change_affects)/(62000+38000))%>%
select(adult_yes)
us_adults %>%
filter(climate_change_effect == "Yes")%>%
mutate(adult_yes = count(climate_change_affects)/(62000+38000))%>%
select(adult_yes)
us_adults %>%
filter(climate_change_affects == "Yes")%>%
mutate(adult_yes = count(climate_change_affects)/(62000+38000))%>%
select(adult_yes)
us_adults %>%
mutate(adult_yes = 62000/(62000+38000))%>%
select(adult_yes)
us_adults %>%
select(adult_yes = 62000/(62000+38000))%>%
us_adults %>%
select(adult_yes = 62000/(62000+38000))%>%
us_adults %>%
select(62000/(62000+38000))%>%
us_adults %>%
mutate(adult_yes = 62000/(62000+38000))%>%
select(adult_yes)
us_adults %>%
count(climate_change_affects) %>%
mutate(p = n /sum(n))
get_ci(us_adults$climate_change_affects == "Yes")
library(infer)
# Xác định biến quan tâm là tỷ lệ người trả lời "Yes"
us_adults_specified <- us_adults %>%
specify(response = climate_change_affects) %>%
assume(proportion = "Yes")
library(infer)
# Xác định biến quan tâm là tỷ lệ người trả lời "Yes"
us_adults_specified <- us_adults %>%
specify(response = climate_change_affects) %>%
success("Yes")  # Chỉ định "Yes" là mức thành công
library(infer)
# Xác định biến quan tâm là tỷ lệ người trả lời "Yes"
us_adults_specified <- us_adults %>%
specify(response = climate_change_affects) %>%
# Tạo các mẫu ngẫu nhiên từ phân phối
us_adults_simulated <- us_adults_specified %>%
generate(reps = 1000, type = "bootstrap")
us_adults_specified <- us_adults %>%
specify(response = climate_change_affects) %>%
us_adults_simulated <- us_adults_specified %>%
generate(reps = 1000, type = "bootstrap")
us_adults_specified <- us_adults %>%
specify(response = climate_change_affects) %>%
# Tạo các mẫu ngẫu nhiên từ phân phối
us_adults_simulated <- us_adults_specified %>%
generate(reps = 1000, type = "bootstrap")
library(infer)
us_adults_new <- us_adults %>%
specify(response = climate_change_affects) %>%
generate(reps = 1000, type = 'bootstrap') %>%
calculate(stat = 'mean')
library(infer)
us_adults_new <- us_adults %>%
specify(response = climate_change_affects) %>%
success("Yes")
library(infer)
us_adults_new <- us_adults %>%
specify(response = climate_change_affects) %>%
success("Yes")
library(openintro)
library(infer)
library(openintro)
us_adults_new <- us_adults %>%
specify(response = climate_change_affects) %>%
success("Yes")
library(openintro)
library(openintro)
library(infer)
library(tidyverse)
success("Yes")
library(infer)
library(openintro)
us_adults_new <- us_adults %>%
specify(response = climate_change_affects) %>%
success("Yes")
library(infer)
library(openintro)
us_adults_new <- us_adults %>%
specify(response = climate_change_affects) %>%
success("Yes")
library(infer)
library(openintro)
us_adults_new <- us_adults %>%
specify(response = climate_change_affects) %>%
success("Yes")
library(infer)
# Xác định biến quan tâm là tỷ lệ người trả lời "Yes"
us_adults_specified <- us_adults %>%
specify(response = climate_change_affects) %>%
success("Yes")  # Chỉ định "Yes" là mức thành công
library(infer)
# Xác định biến quan tâm là tỷ lệ người trả lời "Yes"
us_adults_specified <- us_adults %>%
specify(response = climate_change_affects) %>%
filter(climate_change_affects == "Yes")  # Lọc ra những người trả lời "Yes"
library(infer)
library(openintro)
us_adults_new <- us_adults %>%
specify(response = climate_change_affects, success = "Yes") %>%
generate(reps = 1000, type = 'bootstrap') %>%
calculate(stat = 'mean')
library(infer)
# Xác định biến quan tâm là tỷ lệ người trả lời "Yes"
us_adults_specified <- us_adults %>%
specify(response = climate_change_affects, succees = 'Yes') %>%
# Tạo các mẫu ngẫu nhiên từ phân phối (bootstrap resampling)
us_adults_simulated <- us_adults_specified %>%
generate(reps = 1000, type = "bootstrap")
library(infer)
# Xác định biến quan tâm là tỷ lệ người trả lời "Yes"
us_adults_specified <- us_adults %>%
specify(response = climate_change_affects, succees = 'Yes')
library(infer)
# Xác định biến quan tâm là tỷ lệ người trả lời "Yes"
us_adults_specified <- us_adults %>%
specify(response = climate_change_affects, succees = 'Yes')
library(infer)
# Xác định biến quan tâm là tỷ lệ người trả lời "Yes"
us_adults_specified <- us_adults %>%
specify(response = climate_change_affects, succees = 'Yes')
library(infer)
# Xác định biến quan tâm là tỷ lệ người trả lời "Yes"
us_adults_specified <- us_adults %>%
specify(response = climate_change_affects, succees = 'Yes')
library(infer)
# Xác định biến quan tâm là tỷ lệ người trả lời "Yes"
us_adults_specified <- us_adults %>%
specify(response = climate_change_affects, succees = 'Yes')
library(infer)
# Xác định biến quan tâm là tỷ lệ người trả lời "Yes"
us_adults_specified <- us_adults %>%
specify(response = climate_change_affects, succees = 'Yes')
inspect(us_adults)
library(openintro)
inspect(us_adults)
library(tidyverse)
library(infer)
# Thiết lập thông số
set.seed(123)d
library(tidyverse)
library(infer)
# Thiết lập thông số
set.seed(123)
p_true <- 0.62     # Tỷ lệ thật từ quần thể
n_samp <- 60       # Cỡ mẫu mỗi lần
n_ci <- 50         # Số khoảng tin cậy
level_ci <- 0.90   # Mức tin cậy bạn chọn (khác 95%)
# Hàm lấy 1 khoảng tin cậy bootstrap
get_one_ci <- function() {
samp <- us_adults %>% sample_n(size = n_samp)
ci <- samp %>%
mutate(climate_change_affects = as.character(climate_change_affects)) %>%
specify(response = climate_change_affects, success = "Yes") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "prop") %>%
get_ci(level = level_ci)
# Trả về khoảng tin cậy và thông tin kèm theo
tibble(
lower = ci$lower_ci,
upper = ci$upper_ci,
p_hat = mean(samp$climate_change_affects == "Yes"),
contains_p = p_true >= ci$lower_ci & p_true <= ci$upper_ci
)
}
# Tạo 50 khoảng tin cậy
ci_results <- map_dfr(1:n_ci, ~get_one_ci()) %>%
mutate(id = row_number())
# Vẽ biểu đồ các khoảng tin cậy
ggplot(ci_results, aes(x = id, y = p_hat)) +
geom_errorbar(aes(ymin = lower, ymax = upper, color = contains_p), width = 0.2) +
geom_hline(yintercept = p_true, linetype = "dashed", color = "red") +
labs(title = "50 khoảng tin cậy bootstrap cho tỷ lệ",
subtitle = paste0("Tỷ lệ thật là ", p_true, " - mức tin cậy ", level_ci * 100, "%"),
x = "Số thứ tự mẫu",
y = "Tỷ lệ mẫu (p̂)") +
scale_color_manual(values = c("TRUE" = "blue", "FALSE" = "orange"),
labels = c("Chứa tỷ lệ thật", "Không chứa"),
name = "") +
theme_minimal()
# Tính tỷ lệ khoảng tin cậy chứa tỷ lệ thật
mean(ci_results$contains_p)
# Mã thực hiện khoảng tin cậy với mức tin cậy khác 95%
library(infer)
# Thiết lập thông số
level_ci <- 0.90  # Chọn mức tin cậy 90%
# Tính khoảng tin cậy
ci_result <- samp %>%
specify(response = climate_change_affects, success = "Yes") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "prop") %>%
get_ci(level = level_ci)
library(boot, lib.loc = "C:/Program Files/R/R-4.4.2/library")
inspect(us_adults)
set.seed(1)
obs_mean <- gss %>%
specify(response = hours) %>%
calculate(stat = "mean")
null_dist <- gss %>%
specify(response = hours) %>%
hypothesize(null = "point", mu = 40) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "mean")
obs_mean
obs_mean
null_dist
set.seed(1)
source("io/read_data.R")
setwd("D:/UTE/Semester 4/R programming/customer-personality-analysis")
source("io/read_data.R")
source("exceptions/error_handlers.R")
handle_error({
df <- read_data("data/marketing_campaign.csv")
if (!is.null(df)) {
print(head(df))
}
})
source("io/read_data.R")
source("exceptions/error_handlers.R")
handle_error({
df <- read.csv("data/marketing_campaign.csv")
if (!is.null(df)) {
print(head(df))
}
})
source("io/read_data.R")
source("exceptions/error_handlers.R")
handle_error({
df <- read_data("data/marketing_campaign.csv")
if (!is.null(df)) {
print(head(df))
}
})
df
View(df)
View(df)
cat(df)
concat(df)
library(dplyr)
library(dplyr)
glimpse()
glimpse(df)
source("io/read_data.R")
source("exceptions/error_handlers.R")
library(dplyr)
handle_error({
df <- read_data("data/marketing_campaign.csv")
if (!is.null(df)) {
print(head(df))
}
View(df)
glimpse(df)
})
source("io/read_data.R")
source("exceptions/error_handlers.R")
library(dplyr)
handle_error({
df <- read_data("data/marketing_campaign.csv")
if (!is.null(df)) {
print(head(df))
}
})
